package handlers

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"io"
	"log"
	"net/http"
	"os"
)

type HandshakeResponse struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Load private key from PEM file
func loadPrivateKey() (*rsa.PrivateKey, error) {
	privateKeyFile, err := os.ReadFile("certs/private_key.pem")
	if err != nil {
		return nil, err
	}

	block, _ := pem.Decode(privateKeyFile)
	if block == nil || block.Type != "RSA PRIVATE KEY" {
		return nil, err
	}

	return x509.ParsePKCS1PrivateKey(block.Bytes)
}

// Load public key from PEM file
func loadPublicKey() (*rsa.PublicKey, error) {
	publicKeyFile, err := os.ReadFile("certs/public_key.pem")
	if err != nil {
		return nil, err
	}

	block, _ := pem.Decode(publicKeyFile)
	if block == nil || block.Type != "PUBLIC KEY" {
		return nil, err
	}

	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		return nil, err
	}

	return pub.(*rsa.PublicKey), nil
}

// HandleHandshake handles the encrypted handshake request
func HandleHandshake(w http.ResponseWriter, r *http.Request) {
	privateKey, err := loadPrivateKey()
	if err != nil {
		http.Error(w, "Failed to load private key", http.StatusInternalServerError)
		return
	}

	publicKey, err := loadPublicKey()
	if err != nil {
		http.Error(w, "Failed to load public key", http.StatusInternalServerError)
		return
	}

	// Read encrypted message from client
	encryptedMessage, err := io.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "Failed to read request body", http.StatusBadRequest)
		return
	}

	// Decrypt the message using the server's private key
	decryptedMessage, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, encryptedMessage)
	if err != nil {
		http.Error(w, "Failed to decrypt message", http.StatusInternalServerError)
		return
	}

	log.Printf("Received decrypted message: %s\n", string(decryptedMessage))

	// Prepare a response message
	responseMessage := []byte("Handshake successful")

	// Encrypt the response using the client's public key
	encryptedResponse, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, responseMessage)
	if err != nil {
		http.Error(w, "Failed to encrypt response", http.StatusInternalServerError)
		return
	}

	// Send the encrypted response back to the client
	w.Header().Set("Content-Type", "application/octet-stream")
	w.Write(encryptedResponse)
}
